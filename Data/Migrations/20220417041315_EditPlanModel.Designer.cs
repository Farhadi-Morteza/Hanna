// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220417041315_EditPlanModel")]
    partial class EditPlanModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityIndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityIndicatorId");

                    b.HasIndex("BusinessId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Models.ActivityIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MetricId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.ToTable("ActivityIndicators");
                });

            modelBuilder.Entity("Models.ActivityPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Capacitylevel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ForecastFinalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ForecastLevel")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("BusinessTypeId");

                    b.HasIndex("PlanId");

                    b.ToTable("ActivityPlans");
                });

            modelBuilder.Entity("Models.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("PrincipalBusinessId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PrincipalBusinessId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Models.BusinessType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("BusinessTypes");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCategoryId");

                    b.HasIndex("CompanyParentId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Models.CompanyCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CompanyCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06685e00-1219-4972-9921-62f198dadff9"),
                            IsDeleted = false,
                            Name = "هلدینگ"
                        },
                        new
                        {
                            Id = new Guid("d221ddf9-42f8-4070-8287-1ea01178b5da"),
                            IsDeleted = false,
                            Name = "شرکت"
                        },
                        new
                        {
                            Id = new Guid("1abf45d6-044f-48c6-ae48-16bc2d222b1e"),
                            IsDeleted = false,
                            Name = "کشت و صنعت"
                        },
                        new
                        {
                            Id = new Guid("cb51d684-41f0-4365-a769-da810db2b9ef"),
                            IsDeleted = false,
                            Name = "واحد"
                        },
                        new
                        {
                            Id = new Guid("eb4ce414-065d-4b06-bbb5-702a63dc5112"),
                            IsDeleted = false,
                            Name = "واحد فرعی"
                        });
                });

            modelBuilder.Entity("Models.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2827342a-0dec-44ca-b7d4-1ae16db9d0b1"),
                            IsDeleted = false,
                            Name = "سهامی عام"
                        },
                        new
                        {
                            Id = new Guid("3b5f187f-47ab-4c2c-9fd8-8b855554b918"),
                            IsDeleted = false,
                            Name = "سهامی خاص"
                        },
                        new
                        {
                            Id = new Guid("669e0470-ce23-49e0-95a8-24e2c69f95b2"),
                            IsDeleted = false,
                            Name = "مسئولیت محدود"
                        },
                        new
                        {
                            Id = new Guid("f1d3bdfd-bb13-4e78-b8bf-08913fc48846"),
                            IsDeleted = false,
                            Name = "تضامنی"
                        },
                        new
                        {
                            Id = new Guid("87aa7b7f-0f3d-4647-9f19-6136407bebe1"),
                            IsDeleted = false,
                            Name = "مختلط غیرسهامی"
                        },
                        new
                        {
                            Id = new Guid("4e4755e4-1c3e-4dfe-b0ac-5d69c3044d1a"),
                            IsDeleted = false,
                            Name = "مختلط سهامی"
                        },
                        new
                        {
                            Id = new Guid("a9c5bc0d-d35b-43f9-bc97-651d02733b99"),
                            IsDeleted = false,
                            Name = "شرکت نسبی"
                        });
                });

            modelBuilder.Entity("Models.Culture", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LanguageTag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Culture");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Language = "Persian",
                            LanguageTag = "fa-IR",
                            Location = "Iran"
                        },
                        new
                        {
                            Id = 2,
                            Language = "English",
                            LanguageTag = "en-US",
                            Location = "United State"
                        });
                });

            modelBuilder.Entity("Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8a4c858-7c01-497e-9658-1aa2d832c728"),
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Charles Montgomery Burns",
                            Title = "Owner"
                        },
                        new
                        {
                            Id = new Guid("7a4f16a2-1352-41fb-8b2c-09d9ec07c916"),
                            IsActive = false,
                            IsDeleted = false,
                            ManagerId = new Guid("d8a4c858-7c01-497e-9658-1aa2d832c728"),
                            Name = "Waylon Smithers, Jr.",
                            Title = "Assistant"
                        },
                        new
                        {
                            Id = new Guid("fce3ea9f-ef52-47c9-a06e-2946f2a955cb"),
                            IsActive = false,
                            IsDeleted = false,
                            ManagerId = new Guid("7a4f16a2-1352-41fb-8b2c-09d9ec07c916"),
                            Name = "Lenny Leonard",
                            Title = "Technical Supervisor"
                        },
                        new
                        {
                            Id = new Guid("f786edaa-921f-413c-9953-7129f2bbe4ea"),
                            IsActive = false,
                            IsDeleted = false,
                            ManagerId = new Guid("7a4f16a2-1352-41fb-8b2c-09d9ec07c916"),
                            Name = "Carl Carlson",
                            Title = "Safety Operations Supervisor"
                        },
                        new
                        {
                            Id = new Guid("b91327b3-79b6-40c5-9c52-3e6f6dbacb17"),
                            IsActive = false,
                            IsDeleted = false,
                            ManagerId = new Guid("f786edaa-921f-413c-9953-7129f2bbe4ea"),
                            Name = "Inanimate Carbon Rod",
                            Title = "Rod"
                        },
                        new
                        {
                            Id = new Guid("d6e0781e-f92d-4ada-bf86-4943fbf3f42c"),
                            IsActive = false,
                            IsDeleted = false,
                            ManagerId = new Guid("b91327b3-79b6-40c5-9c52-3e6f6dbacb17"),
                            Name = "Homer Simpson",
                            Title = "Safety Inspector"
                        });
                });

            modelBuilder.Entity("Models.Metric", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BreakApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("BreakCheckout")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("FinalApproval")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("PlanApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("PlanCheckout")
                        .HasColumnType("bit");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("YearId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("YearId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Models.PrincipalBusiness", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("PrincipalBusinesses");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductIndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ProductIndicatorId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Models.ProductActivityPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ForecastProduction")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ForecastSales")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SalePerProductUnit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityPlanId");

                    b.HasIndex("ProductId");

                    b.ToTable("productActivityPlans");
                });

            modelBuilder.Entity("Models.ProductIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MetricId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("UnitConversion")
                        .HasPrecision(10, 9)
                        .HasColumnType("decimal(10,9)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MetricId");

                    b.ToTable("ProductIndicators");
                });

            modelBuilder.Entity("Models.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CultrueId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CultrueId");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1c3c921-abdf-4257-9e72-693cae9c51e7"),
                            Name = "اصلی"
                        },
                        new
                        {
                            Id = new Guid("252aec3b-f421-416f-b596-fb8f93014886"),
                            Name = "فرعی"
                        });
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varbinary(64)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.Year", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Name")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("Models.Activity", b =>
                {
                    b.HasOne("Models.ActivityIndicator", "ActivityIndicator")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Business", "Business")
                        .WithMany("Activities")
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityIndicator");

                    b.Navigation("Business");
                });

            modelBuilder.Entity("Models.ActivityIndicator", b =>
                {
                    b.HasOne("Models.Metric", "Metric")
                        .WithMany("ActivityIndicators")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Models.ActivityPlan", b =>
                {
                    b.HasOne("Models.Activity", "Activity")
                        .WithMany("ActivityPlans")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.BusinessType", "BusinessType")
                        .WithMany("ActivityPlans")
                        .HasForeignKey("BusinessTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Plan", "Plan")
                        .WithMany("ActivityPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("BusinessType");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Models.Business", b =>
                {
                    b.HasOne("Models.PrincipalBusiness", "PrincipalBusiness")
                        .WithMany("Businesses")
                        .HasForeignKey("PrincipalBusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrincipalBusiness");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.HasOne("Models.CompanyCategory", "CompanyCategory")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Company", "CompanyParent")
                        .WithMany("CompanyChild")
                        .HasForeignKey("CompanyParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CompanyCategory");

                    b.Navigation("CompanyParent");
                });

            modelBuilder.Entity("Models.Employee", b =>
                {
                    b.HasOne("Models.Employee", "Manager")
                        .WithMany("Reports")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Models.Plan", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany("Plans")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Year", "Year")
                        .WithMany("Plans")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.HasOne("Models.Activity", "Activity")
                        .WithMany("Products")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ProductIndicator", "ProductIndicator")
                        .WithMany("Products")
                        .HasForeignKey("ProductIndicatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("ProductIndicator");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Models.ProductActivityPlan", b =>
                {
                    b.HasOne("Models.ActivityPlan", "ActivityPlan")
                        .WithMany("ProductActivityPlans")
                        .HasForeignKey("ActivityPlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityPlan");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.ProductIndicator", b =>
                {
                    b.HasOne("Models.Metric", "Metric")
                        .WithMany("ProductIndicators")
                        .HasForeignKey("MetricId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metric");
                });

            modelBuilder.Entity("Models.ProductType", b =>
                {
                    b.HasOne("Models.Culture", "Culture")
                        .WithMany("ProductTypes")
                        .HasForeignKey("CultrueId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Models.Activity", b =>
                {
                    b.Navigation("ActivityPlans");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Models.ActivityIndicator", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Models.ActivityPlan", b =>
                {
                    b.Navigation("ProductActivityPlans");
                });

            modelBuilder.Entity("Models.Business", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Models.BusinessType", b =>
                {
                    b.Navigation("ActivityPlans");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.Navigation("CompanyChild");

                    b.Navigation("Plans");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.CompanyCategory", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Models.Culture", b =>
                {
                    b.Navigation("ProductTypes");
                });

            modelBuilder.Entity("Models.Employee", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Models.Metric", b =>
                {
                    b.Navigation("ActivityIndicators");

                    b.Navigation("ProductIndicators");
                });

            modelBuilder.Entity("Models.Plan", b =>
                {
                    b.Navigation("ActivityPlans");
                });

            modelBuilder.Entity("Models.PrincipalBusiness", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Models.ProductIndicator", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Models.Year", b =>
                {
                    b.Navigation("Plans");
                });
#pragma warning restore 612, 618
        }
    }
}
