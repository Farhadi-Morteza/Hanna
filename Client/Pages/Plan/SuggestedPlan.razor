@page "/SuggestedPlan"
@attribute [Authorize(Roles = "Admin, User")]

@inject PlanService planService
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@inject ISnackbar snackbar

<PageTitle>@(Resources.DataDictionary.PlanList)</PageTitle>

<MrsGrid Justify = "Justify.Center">
    
    <AuthorizeView Roles = "Admin">
        <NotAuthorized>

        </NotAuthorized>
        <Authorized>

			<MudItem xs ="11">
				<MudPaper>  
					<MudContainer>
						<br />
						<MudGrid>
							<MudStack Row = "true" Spacing="@(Infrastructure.Constant.ButtonSpacing)">							
									<MrsButtonCreate 
										ButtonType="ButtonType.Button" 
										OnClick="@(() => Create())" />     
									<MrsButtonCreate 
										ButtonType="ButtonType.Button" 
										OnClick="@(() => CreateNextYearPlans())" >
											@(Resources.Buttoms.NextYearPlans)
									</MrsButtonCreate>                  
									<MrsButtonCreate 
										ButtonType="ButtonType.Button" 
										OnClick="@(() => CreateThisYearPlans())" >
											@(Resources.Buttoms.ThisYearPlans)
									</MrsButtonCreate>                  
							</MudStack>
						</MudGrid>
					</MudContainer>
					<br />
					<MudGrid>
						<MudItem xs="12">
							<MudAlert Severity="Severity.Warning" Dense="true" ContentAlignment="HorizontalAlignment.Right">برنامه ها قابل حذف نیستند</MudAlert>    
							<MudAlert Severity="Severity.Warning" Dense="true" ContentAlignment="HorizontalAlignment.Right">هر واحد در هر سال تنها می تواند یک برنامه داشته باشد</MudAlert>      
							<MudAlert Severity="Severity.Warning" Dense="true" ContentAlignment="HorizontalAlignment.Right">با انتخاب گزینه"ایجاد برنامه سال بعد" می توانید بصورت خودکار برای تمامی واحدها برنامه سال بعد را ایجاد کنید</MudAlert>      
						</MudItem>
					</MudGrid>
				</MudPaper>
			</MudItem>

        </Authorized>
    </AuthorizeView>

    @*<PlanIndexFormEditor Model="@Models" OnValidSubmit = "@(() => Submit())" />*@
	<PlanList Plans = "@(Models)" PlanType = "PlanType.SuggestedPlan"></PlanList>


</MrsGrid>



@code {
	#region Constructor ================================================================================================

	protected async override Task OnInitializedAsync()
	{
		Models =
			await planService.GetAsync(query: Resources.ActionRoute.SuggestedPlan);
	}

	#endregion =========================================================================================================

	#region Properties =================================================================================================

	public IList<ViewModels.PlanViewModel> Models { get; set; }

    #endregion =========================================================================================================

    #region Method =====================================================================================================

    private async Task Submit()
    {
    }

	public void Create()
	{
		navigationManager.NavigateTo(uri: Resources.LinkCaptions.Plan_Create, forceLoad: false);
	}

	private async void CreateNextYearPlans()
	{
		var parameters = new DialogParameters();
		parameters.Add(Constant.DialogParameters.ContentText, Resources.Dialog.NextYearPlansConfirm);
		parameters.Add(Constant.DialogParameters.ButtonText, Resources.Buttoms.Confirm);
		parameters.Add(Constant.DialogParameters.Color, Color.Info);

		var dialog = dialogService.Show<MrsDialogTemplating>(Resources.DataDictionary.Warning, parameters);
		var dialogResult = await dialog.Result;

		if (dialogResult.Cancelled == false)
		{
			bool result =
				await planService.PostAllAsync(true, false);

			if (result)
			{
				snackbar.Add($"{Resources.InformationMessages.SaveSuccess}", Severity.Success, config => { config.Icon = Icons.Filled.Save; });

				Models =
					await planService.GetAsync(query: Resources.ActionRoute.SuggestedPlan);

				StateHasChanged();
			}
			//else
			//{
			//    snackbar.Add($"{Resources.InformationMessages.SaveFail}", Severity.Warning, config => { config.Icon = Icons.Filled.SmsFailed; });                
			//}
		}
	}

	private async void CreateThisYearPlans()
	{
		var parameters = new DialogParameters();
		parameters.Add(Constant.DialogParameters.ContentText, Resources.Dialog.ThisYearPlansConfirm);
		parameters.Add(Constant.DialogParameters.ButtonText, Resources.Buttoms.Confirm);
		parameters.Add(Constant.DialogParameters.Color, Color.Info);

		var dialog = dialogService.Show<MrsDialogTemplating>(Resources.DataDictionary.Warning, parameters);
		var dialogResult = await dialog.Result;

		if (dialogResult.Cancelled == false)
		{
			bool result =
				await planService.PostAllAsync(nextYear: false, thisYear: true);

			if (result)
			{
				snackbar.Add($"{Resources.InformationMessages.SaveSuccess}", Severity.Success, config => { config.Icon = Icons.Filled.Save; });

				Models =
					await planService.GetAsync(query: Resources.ActionRoute.SuggestedPlan);

				StateHasChanged();
			}
			//else
			//{
			//    snackbar.Add($"{Resources.InformationMessages.SaveFail}", Severity.Warning, config => { config.Icon = Icons.Filled.SmsFailed; });                
			//}
		}
	}
    #endregion =========================================================================================================

}
