@page "/NewChat"
@using Microsoft.AspNetCore.SignalR.Client
@using Models.General
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 500px;">
    @if (!userMessages.Any())
    {
        <p>No messages yet, start chatting!</p>
    }
    
    @foreach (var usermessage in userMessages)
    {
        <div class="row mb-3 d-flex @(usermessage.CurrentUser? "justify-content-end"  : "")">
            <div class="card shadow @(usermessage.CurrentUser? "color-green mr-5"  : "")" style="width: 18rem;">
                <div class="card-header">
                    @(usermessage.CurrentUser? "You" : usermessage.UserName)
                </div>   
                <div class="list-group list-group-flush">
                    <li class="list-group-item">@usermessage.Message</li>
                </div>   
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">@usermessage.Message</li>
                </ul>  
                <div class="card-footer">
                    <span class="small">@usermessage.DateSent.ToString("HH:mm | MMM dd")</span>
                </div>
            </div>
        </div>
    }
</div>

<div class="container">
    <div class="row">
        <div class="col-3">
            <input @bind="usernameInput" type="text" class="form-control" placeholder="Your name" readonly="@isUserReadOnly" />
        </div>
        <div class="col-6">
            <textarea @bind="messageInput" class="form-control" placeholder="Start Typing..."></textarea>
        </div>
        <div class="col-3">
            <button type="button" @onclick="Send" disabled="@(!IsConnected)" class="btn btn-primary">Send</button>
        </div>
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<UserMessage> userMessages = new();
    private string? usernameInput;
    private string? messageInput;
    private bool isUserReadOnly = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:7058/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            userMessages.Add(new UserMessage 
                { 
                    UserName = user, 
                    Message = message, 
                    CurrentUser = user == usernameInput, 
                    DateSent = DateTime.Now 
                });

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", usernameInput, messageInput);

            isUserReadOnly = true;
            messageInput = string.Empty;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    } 
}