@namespace MrsComponent
@inject MetricService metricService

<MudAutocomplete T="ViewModels.MetricSelectViewModel"
                    Label = "@(Resources.DataDictionary.Metric)"
                    SearchFunc = "@(Search)"
                    ResetValueOnEmptyText = "true"
                    ToStringFunc="@(e => e==null? null : e.Name)"
                    @bind-Value = "@BindTo"
                    Variant = "Variant.Outlined"
                    Clearable="true"
                    Immediate="true"
                    Margin="Margin.Dense"
                    Required="true"
                    CoerceValue="true"
                />

@code {

    protected async override Task OnInitializedAsync()
    {
        SelectList =
            await metricService.GetSelectAsync();
    }

    private IList<ViewModels.MetricSelectViewModel> SelectList { get; set; }  

    private async Task<IEnumerable<ViewModels.MetricSelectViewModel>> Search(string value)
    {
        await Task.Delay(1);

        if (string.IsNullOrEmpty(value))
        {
            return SelectList;
        }

        var data = SelectList;

        return data.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private ViewModels.MetricSelectViewModel bindingValue = 
        new ViewModels.MetricSelectViewModel();

    [Parameter]
    public ViewModels.MetricSelectViewModel BindTo
    {
        get => bindingValue;
        set
        {
            if (bindingValue == value) return;
            bindingValue = value;
            BindToChanged.InvokeAsync(value);
        }
    }
    [Parameter] public EventCallback<ViewModels.MetricSelectViewModel> BindToChanged { get; set; }

}
