@namespace MrsComponent
@inject ActivityIndicatorService activityIndicatorService

<MudAutocomplete T ="ViewModels.ActivityIndicatorSelectViewModel"
	Label = "@(Resources.DataDictionary.ActivityIndicator)"
	SearchFunc = "@(Search)"
	ResetValueOnEmptyText = "true"
	ToStringFunc="(e => e==null? null : e.Name)"
	@bind-Value = "@BindTo"
	Variant = "Variant.Outlined"
	Clearable = "true"
	Immediate = "true"
	Margin ="Margin.Dense"
	Required = "true"
	CoerceValue = "true"
/>


@code {
	protected async override Task OnInitializedAsync()
	{
		SelectList =
			await activityIndicatorService.GetSelectAsync();
	}

	private IList<ViewModels.ActivityIndicatorSelectViewModel> SelectList{ get; set; }

	private async Task<IEnumerable<ViewModels.ActivityIndicatorSelectViewModel>> Search(string value)
	{
		await Task.Delay(1);

		if (string.IsNullOrEmpty(value))
		{
			return SelectList;
		}

		var data = SelectList;

		return data.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	private ViewModels.ActivityIndicatorSelectViewModel bindingValue =
		new ViewModels.ActivityIndicatorSelectViewModel();

	[Parameter]
	public ViewModels.ActivityIndicatorSelectViewModel BindTo
	{
		get => bindingValue;
		set
		{
			if (bindingValue == value) return;
			bindingValue = value;
			BindToChanged.InvokeAsync(value);
		}
	}

	[Parameter]
	public EventCallback<ViewModels.ActivityIndicatorSelectViewModel> BindToChanged{ get; set; }

}
